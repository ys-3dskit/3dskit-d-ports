/* Copyright (c) INRIA and Microsoft Corporation. All rights reserved.
   Licensed under the Apache 2.0 License. */

/* This file was generated by KreMLin <https://github.com/FStarLang/kremlin>
 * KreMLin invocation: ../krml -fc89 -fparentheses -fno-shadow -header /mnt/e/everest/verify/hdrB9w -minimal -fparentheses -fcurly-braces -fno-shadow -header copyright-header.txt -minimal -tmpdir dist/minimal -skip-compilation -extract-uints -add-include <inttypes.h> -add-include <stdbool.h> -add-include "kremlin/internal/compat.h" -add-include "kremlin/internal/types.h" -bundle FStar.UInt64+FStar.UInt32+FStar.UInt16+FStar.UInt8=* extracted/prims.krml extracted/FStar_Pervasives_Native.krml extracted/FStar_Pervasives.krml extracted/FStar_Mul.krml extracted/FStar_Squash.krml extracted/FStar_Classical.krml extracted/FStar_StrongExcludedMiddle.krml extracted/FStar_FunctionalExtensionality.krml extracted/FStar_List_Tot_Base.krml extracted/FStar_List_Tot_Properties.krml extracted/FStar_List_Tot.krml extracted/FStar_Seq_Base.krml extracted/FStar_Seq_Properties.krml extracted/FStar_Seq.krml extracted/FStar_Math_Lib.krml extracted/FStar_Math_Lemmas.krml extracted/FStar_BitVector.krml extracted/FStar_UInt.krml extracted/FStar_UInt32.krml extracted/FStar_Int.krml extracted/FStar_Int16.krml extracted/FStar_Preorder.krml extracted/FStar_Ghost.krml extracted/FStar_ErasedLogic.krml extracted/FStar_UInt64.krml extracted/FStar_Set.krml extracted/FStar_PropositionalExtensionality.krml extracted/FStar_PredicateExtensionality.krml extracted/FStar_TSet.krml extracted/FStar_Monotonic_Heap.krml extracted/FStar_Heap.krml extracted/FStar_Map.krml extracted/FStar_Monotonic_HyperHeap.krml extracted/FStar_Monotonic_HyperStack.krml extracted/FStar_HyperStack.krml extracted/FStar_Monotonic_Witnessed.krml extracted/FStar_HyperStack_ST.krml extracted/FStar_HyperStack_All.krml extracted/FStar_Date.krml extracted/FStar_Universe.krml extracted/FStar_GSet.krml extracted/FStar_ModifiesGen.krml extracted/LowStar_Monotonic_Buffer.krml extracted/LowStar_Buffer.krml extracted/Spec_Loops.krml extracted/LowStar_BufferOps.krml extracted/C_Loops.krml extracted/FStar_UInt8.krml extracted/FStar_Kremlin_Endianness.krml extracted/FStar_UInt63.krml extracted/FStar_Exn.krml extracted/FStar_ST.krml extracted/FStar_All.krml extracted/FStar_Dyn.krml extracted/FStar_Int63.krml extracted/FStar_Int64.krml extracted/FStar_Int32.krml extracted/FStar_Int8.krml extracted/FStar_UInt16.krml extracted/FStar_Int_Cast.krml extracted/FStar_UInt128.krml extracted/C_Endianness.krml extracted/FStar_List.krml extracted/FStar_Float.krml extracted/FStar_IO.krml extracted/C.krml extracted/FStar_Char.krml extracted/FStar_String.krml extracted/LowStar_Modifies.krml extracted/C_String.krml extracted/FStar_Bytes.krml extracted/FStar_HyperStack_IO.krml extracted/C_Failure.krml extracted/TestLib.krml extracted/FStar_Int_Cast_Full.krml
 * F* version: 059db0c8
 * KreMLin version: 916c37ac
 */

import ys3ds.mbedtls.everest.kremlin.internal.compat;

extern (C) @nogc nothrow:

extern __gshared Prims_int FStar_UInt64_n;

Prims_int FStar_UInt64_v (ulong x0);

ulong FStar_UInt64_uint_to_t (Prims_int x0);

ulong FStar_UInt64_add (ulong x0, ulong x1);

ulong FStar_UInt64_add_underspec (ulong x0, ulong x1);

ulong FStar_UInt64_add_mod (ulong x0, ulong x1);

ulong FStar_UInt64_sub (ulong x0, ulong x1);

ulong FStar_UInt64_sub_underspec (ulong x0, ulong x1);

ulong FStar_UInt64_sub_mod (ulong x0, ulong x1);

ulong FStar_UInt64_mul (ulong x0, ulong x1);

ulong FStar_UInt64_mul_underspec (ulong x0, ulong x1);

ulong FStar_UInt64_mul_mod (ulong x0, ulong x1);

ulong FStar_UInt64_mul_div (ulong x0, ulong x1);

ulong FStar_UInt64_div (ulong x0, ulong x1);

ulong FStar_UInt64_rem (ulong x0, ulong x1);

ulong FStar_UInt64_logand (ulong x0, ulong x1);

ulong FStar_UInt64_logxor (ulong x0, ulong x1);

ulong FStar_UInt64_logor (ulong x0, ulong x1);

ulong FStar_UInt64_lognot (ulong x0);

ulong FStar_UInt64_shift_right (ulong x0, uint x1);

ulong FStar_UInt64_shift_left (ulong x0, uint x1);

bool FStar_UInt64_eq (ulong x0, ulong x1);

bool FStar_UInt64_gt (ulong x0, ulong x1);

bool FStar_UInt64_gte (ulong x0, ulong x1);

bool FStar_UInt64_lt (ulong x0, ulong x1);

bool FStar_UInt64_lte (ulong x0, ulong x1);

ulong FStar_UInt64_minus (ulong x0);

extern __gshared uint FStar_UInt64_n_minus_one;

ulong FStar_UInt64_eq_mask (ulong a, ulong b);

ulong FStar_UInt64_gte_mask (ulong a, ulong b);

Prims_string FStar_UInt64_to_string (ulong x0);

ulong FStar_UInt64_of_string (Prims_string x0);

extern __gshared Prims_int FStar_UInt32_n;

Prims_int FStar_UInt32_v (uint x0);

uint FStar_UInt32_uint_to_t (Prims_int x0);

uint FStar_UInt32_add (uint x0, uint x1);

uint FStar_UInt32_add_underspec (uint x0, uint x1);

uint FStar_UInt32_add_mod (uint x0, uint x1);

uint FStar_UInt32_sub (uint x0, uint x1);

uint FStar_UInt32_sub_underspec (uint x0, uint x1);

uint FStar_UInt32_sub_mod (uint x0, uint x1);

uint FStar_UInt32_mul (uint x0, uint x1);

uint FStar_UInt32_mul_underspec (uint x0, uint x1);

uint FStar_UInt32_mul_mod (uint x0, uint x1);

uint FStar_UInt32_mul_div (uint x0, uint x1);

uint FStar_UInt32_div (uint x0, uint x1);

uint FStar_UInt32_rem (uint x0, uint x1);

uint FStar_UInt32_logand (uint x0, uint x1);

uint FStar_UInt32_logxor (uint x0, uint x1);

uint FStar_UInt32_logor (uint x0, uint x1);

uint FStar_UInt32_lognot (uint x0);

uint FStar_UInt32_shift_right (uint x0, uint x1);

uint FStar_UInt32_shift_left (uint x0, uint x1);

bool FStar_UInt32_eq (uint x0, uint x1);

bool FStar_UInt32_gt (uint x0, uint x1);

bool FStar_UInt32_gte (uint x0, uint x1);

bool FStar_UInt32_lt (uint x0, uint x1);

bool FStar_UInt32_lte (uint x0, uint x1);

uint FStar_UInt32_minus (uint x0);

extern __gshared uint FStar_UInt32_n_minus_one;

uint FStar_UInt32_eq_mask (uint a, uint b);

uint FStar_UInt32_gte_mask (uint a, uint b);

Prims_string FStar_UInt32_to_string (uint x0);

uint FStar_UInt32_of_string (Prims_string x0);

extern __gshared Prims_int FStar_UInt16_n;

Prims_int FStar_UInt16_v (ushort x0);

ushort FStar_UInt16_uint_to_t (Prims_int x0);

ushort FStar_UInt16_add (ushort x0, ushort x1);

ushort FStar_UInt16_add_underspec (ushort x0, ushort x1);

ushort FStar_UInt16_add_mod (ushort x0, ushort x1);

ushort FStar_UInt16_sub (ushort x0, ushort x1);

ushort FStar_UInt16_sub_underspec (ushort x0, ushort x1);

ushort FStar_UInt16_sub_mod (ushort x0, ushort x1);

ushort FStar_UInt16_mul (ushort x0, ushort x1);

ushort FStar_UInt16_mul_underspec (ushort x0, ushort x1);

ushort FStar_UInt16_mul_mod (ushort x0, ushort x1);

ushort FStar_UInt16_mul_div (ushort x0, ushort x1);

ushort FStar_UInt16_div (ushort x0, ushort x1);

ushort FStar_UInt16_rem (ushort x0, ushort x1);

ushort FStar_UInt16_logand (ushort x0, ushort x1);

ushort FStar_UInt16_logxor (ushort x0, ushort x1);

ushort FStar_UInt16_logor (ushort x0, ushort x1);

ushort FStar_UInt16_lognot (ushort x0);

ushort FStar_UInt16_shift_right (ushort x0, uint x1);

ushort FStar_UInt16_shift_left (ushort x0, uint x1);

bool FStar_UInt16_eq (ushort x0, ushort x1);

bool FStar_UInt16_gt (ushort x0, ushort x1);

bool FStar_UInt16_gte (ushort x0, ushort x1);

bool FStar_UInt16_lt (ushort x0, ushort x1);

bool FStar_UInt16_lte (ushort x0, ushort x1);

ushort FStar_UInt16_minus (ushort x0);

extern __gshared uint FStar_UInt16_n_minus_one;

ushort FStar_UInt16_eq_mask (ushort a, ushort b);

ushort FStar_UInt16_gte_mask (ushort a, ushort b);

Prims_string FStar_UInt16_to_string (ushort x0);

ushort FStar_UInt16_of_string (Prims_string x0);

extern __gshared Prims_int FStar_UInt8_n;

Prims_int FStar_UInt8_v (ubyte x0);

ubyte FStar_UInt8_uint_to_t (Prims_int x0);

ubyte FStar_UInt8_add (ubyte x0, ubyte x1);

ubyte FStar_UInt8_add_underspec (ubyte x0, ubyte x1);

ubyte FStar_UInt8_add_mod (ubyte x0, ubyte x1);

ubyte FStar_UInt8_sub (ubyte x0, ubyte x1);

ubyte FStar_UInt8_sub_underspec (ubyte x0, ubyte x1);

ubyte FStar_UInt8_sub_mod (ubyte x0, ubyte x1);

ubyte FStar_UInt8_mul (ubyte x0, ubyte x1);

ubyte FStar_UInt8_mul_underspec (ubyte x0, ubyte x1);

ubyte FStar_UInt8_mul_mod (ubyte x0, ubyte x1);

ubyte FStar_UInt8_mul_div (ubyte x0, ubyte x1);

ubyte FStar_UInt8_div (ubyte x0, ubyte x1);

ubyte FStar_UInt8_rem (ubyte x0, ubyte x1);

ubyte FStar_UInt8_logand (ubyte x0, ubyte x1);

ubyte FStar_UInt8_logxor (ubyte x0, ubyte x1);

ubyte FStar_UInt8_logor (ubyte x0, ubyte x1);

ubyte FStar_UInt8_lognot (ubyte x0);

ubyte FStar_UInt8_shift_right (ubyte x0, uint x1);

ubyte FStar_UInt8_shift_left (ubyte x0, uint x1);

bool FStar_UInt8_eq (ubyte x0, ubyte x1);

bool FStar_UInt8_gt (ubyte x0, ubyte x1);

bool FStar_UInt8_gte (ubyte x0, ubyte x1);

bool FStar_UInt8_lt (ubyte x0, ubyte x1);

bool FStar_UInt8_lte (ubyte x0, ubyte x1);

ubyte FStar_UInt8_minus (ubyte x0);

extern __gshared uint FStar_UInt8_n_minus_one;

ubyte FStar_UInt8_eq_mask (ubyte a, ubyte b);

ubyte FStar_UInt8_gte_mask (ubyte a, ubyte b);

Prims_string FStar_UInt8_to_string (ubyte x0);

ubyte FStar_UInt8_of_string (Prims_string x0);

alias FStar_UInt8_byte = ubyte;

